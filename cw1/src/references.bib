@misc{RAIIcppr95,
    author = {},
    title = {{RAII - cppreference.com}},
    howpublished = {\url{https://en.cppreference.com/w/cpp/language/raii#:~:text=Resource\%20Acquisition\%20Is\%20Initialization\%20or,in\%20limited\%20supply)\%20to\%20the}},
    month = {},
    year = {},
    note = {(Accessed on 02/13/2023)}
}

@misc{RAIIRust30,
    author = {},
    title = {{RAII - Rust By Example}},
    howpublished = {\url{https://doc.rust-lang.org/rust-by-example/}},
    month = {},
    year = {},
    note = {(Accessed on 02/13/2023)}
}

@misc{WhatisOw63,
    author = {},
    title = {{What is Ownership? - The Rust Programming Language}},
    howpublished = {\url{https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html}},
    month = {},
    year = {},
    note = {(Accessed on 02/13/2023)}
}

@book{klabnik2019rust,
    title={{The Rust Programming Language (Covers Rust 2018)}},
    author={Klabnik, S. and Nichols, C.},
    isbn={9781718500440},
    url={https://books.google.co.uk/books?id=0Vv6DwAAQBAJ},
    year={2019},
    publisher={No Starch Press}
}

@inproceedings{10.1145/3102980.3103006,
    author = {Balasubramanian, Abhiram and Baranowski, Marek S. and Burtsev, Anton and Panda, Aurojit and Rakamari\'{c}, Zvonimir and Ryzhyk, Leonid},
    title = {{System Programming in Rust: Beyond Safety}},
    year = {2017},
    isbn = {9781450350686},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3102980.3103006},
    doi = {10.1145/3102980.3103006},
    abstract = {Rust is a new system programming language that offers a practical and safe alternative to C. Rust is unique in that it enforces safety without runtime overhead, most importantly, without the overhead of garbage collection. While zero-cost safety is remarkable on its own, we argue that the superpowers of Rust go beyond safety. In particular, Rust's linear type system enables capabilities that cannot be implemented efficiently in traditional languages, both safe and unsafe, and that dramatically improve security and reliability of system software. We show three examples of such capabilities: zero-copy software fault isolation, efficient static information flow analysis, and automatic checkpointing. While these capabilities have been in the spotlight of systems research for a long time, their practical use is hindered by high cost and complexity. We argue that with the adoption of Rust these mechanisms will become commoditized.},
    booktitle = {Proceedings of the 16th Workshop on Hot Topics in Operating Systems},
    pages = {156–161},
    numpages = {6},
    location = {Whistler, BC, Canada},
    series = {HotOS '17}
}

@misc{RcTtheRe81,
    author = {},
    title = {{\texttt{Rc<T>}, the Reference Counted Smart Pointer - The Rust Programming Language}},
    howpublished = {\url{https://doc.rust-lang.org/book/ch15-04-rc.html}},
    month = {},
    year = {},
    note = {(Accessed on 02/14/2023)}
}

@misc{1Extendi11,
    author = {},
    title = {{Extending Python with C or C++ — Python 3.11.2 documentation}},
    howpublished = {\url{https://docs.python.org/3/extending/extending.html#reference-counts}},
    month = {},
    year = {},
    note = {(Accessed on 02/15/2023)}
}

@misc{OSXLionv34,
    author = {},
    title = {{OS X Lion v10.7}},
    howpublished = {\url{https://developer.apple.com/library/archive/releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_7.html#//apple_ref/doc/uid/TP40010355-SW62}},
    month = {},
    year = {},
    note = {(Accessed on 02/15/2023)}
}

@misc{Influenc17,
    author = {},
    title = {Influences - The Rust Reference},
    howpublished = {\url{https://doc.rust-lang.org/reference/influences.html}},
    month = {},
    year = {},
    note = {(Accessed on 02/17/2023)}
}

@misc{CycloneI74,
    author = {},
    title = {Cyclone: Introduction to Regions},
    howpublished = {\url{http://cyclone.thelanguage.org/wiki/Introduction%20to%20Regions/}},
    month = {},
    year = {},
    note = {(Accessed on 02/17/2023)}
}

@inproceedings{10.1145/512529.512563,
    author = {Grossman, Dan and Morrisett, Greg and Jim, Trevor and Hicks, Michael and Wang, Yanling and Cheney, James},
    title = {Region-Based Memory Management in Cyclone},
    year = {2002},
    isbn = {1581134630},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/512529.512563},
    doi = {10.1145/512529.512563},
    abstract = {Cyclone is a type-safe programming language derived from C. The primary design goal of Cyclone is to let programmers control data representation and memory management without sacrificing type-safety. In this paper, we focus on the region-based memory management of Cyclone and its static typing discipline. The design incorporates several advancements, including support for region subtyping and a coherent integration with stack allocation and a garbage collector. To support separate compilation, Cyclone requires programmers to write some explicit region annotations, but a combination of default annotations, local type inference, and a novel treatment of region effects reduces this burden. As a result, we integrate C idioms in a region-based framework. In our experience, porting legacy C to Cyclone has required altering about 8\% of the code; of the changes, only 6\% (of the 8\%) were region annotations.},
    booktitle = {Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation},
    pages = {282–293},
    numpages = {12},
    location = {Berlin, Germany},
    series = {PLDI '02}
}

@inproceedings{10.1145/1029873.1029883,
    author = {Hicks, Michael and Morrisett, Greg and Grossman, Dan and Jim, Trevor},
    title = {Experience with Safe Manual Memory-Management in Cyclone},
    year = {2004},
    isbn = {1581139454},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1029873.1029883},
    doi = {10.1145/1029873.1029883},
    abstract = {The goal of the Cyclone project is to investigate type safety for low-level languages such as C. Our most difficult challenge has been providing programmers control over memory management while retaining type safety. This paper reports on our experience trying to integrate and effectively use two previously proposed, type-safe memory management mechanisms: statically-scoped regions and unique pointers. We found that these typing mechanisms can be combined to build alternative memory-management abstractions, such as reference counted objects and arenas with dynamic lifetimes, and thus provide a flexible basis. Our experience---porting C programs and building new applications for resource-constrained systems---confirms that experts can use these features to improve memory footprint and sometimes to improve throughput when used instead of, or in combination with, conservative garbage collection.},
    booktitle = {Proceedings of the 4th International Symposium on Memory Management},
    pages = {73–84},
    numpages = {12},
    keywords = {memory safety, memory management, cyclone, unique pointers, regions},
    location = {Vancouver, BC, Canada},
    series = {ISMM '04}
}

@misc{Linux61O57,
    author = {},
    title = {Linux 6.1 Officially Adds Support for Rust in the Kernel},
    howpublished = {\url{https://www.infoq.com/news/2022/12/linux-6-1-rust/}},
    month = {},
    year = {},
    note = {(Accessed on 02/18/2023)}
}

@article{srinath2017python,
    title={Python--the fastest growing programming language},
    author={Srinath, KR},
    journal={International Research Journal of Engineering and Technology},
    volume={4},
    number={12},
    pages={354--357},
    year={2017}
}

@article{moore1998cramming,
    title={Cramming more components onto integrated circuits},
    author={Moore, Gordon E},
    journal={Proceedings of the IEEE},
    volume={86},
    number={1},
    pages={82--85},
    year={1998},
    publisher={Ieee}
}

@InProceedings{10.1007/978-3-642-18206-8_9,
    author="Nambiar, Raghunath
    and Poess, Meikel",
    editor="Nambiar, Raghunath
    and Poess, Meikel",
    title="Transaction Performance vs. Moore's Law: A Trend Analysis",
    booktitle="Performance Evaluation, Measurement and Characterization of Complex Systems",
    year="2011",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="110--120",
    abstract="Intel co-founder Gordon E. Moore postulated in his famous 1965 paper that the number of components in integrated circuits had doubled every year from their invention in 1958 until 1965, and then predicted that the trend would continue for at least ten years. Later, David House, an Intel colleague, after factoring in the increase in performance of transistors, concluded that integrated circuits would double in performance every 18 months. Despite this trend in microprocessor improvements, your favored text editor continues to take the same time to start and your PC takes pretty much the same time to reboot as it took 10 years ago. Can this observation be made on systems supporting the fundamental aspects of our information based economy, namely transaction processing systems?",
    isbn="978-3-642-18206-8"
}

@ARTICLE{4785858,
    author={Liddle, David E.},
    journal={IEEE Solid-State Circuits Society Newsletter}, 
    title={The Wider Impact of Moore's Law}, 
    year={2006},
    volume={11},
    number={3},
    pages={28-30},
    doi={10.1109/N-SSC.2006.4785858}
}

@article{waldrop2016chips,
    author = {Waldrop, M. Mitchell},
    title = {The chips are down for Moore’s law},
    journal = {Nature News},
    volume = {530},
    number = {7589},
    pages = {144},
    year = {2016},
    doi = {10.1038/530144a}
}

@ARTICLE{6186749,
    author={Cavin, Ralph K. and Lugli, Paolo and Zhirnov, Victor V.},
    journal={Proceedings of the IEEE}, 
    title={Science and Engineering Beyond Moore's Law}, 
    year={2012},
    volume={100},
    number={Special Centennial Issue},
    pages={1720-1749},
    doi={10.1109/JPROC.2012.2190155}
}

@article{Tuomi_2002,
    title={The Lives and Death of Moore’s Law},
    volume={7},
    url={https://journals.uic.edu/ojs/index.php/fm/article/view/1000},
    DOI={10.5210/fm.v7i11.1000},
    abstractNote={Moore’s Law has been an important benchmark for developments in microelectronics and information processing for over three decades. During this time, its applications and interpretations have proliferated and expanded, often far beyond the validity of the original assumptions made by Moore. Technical considerations of optimal chip manufacturing costs have been expanded to processor performance, economics of computing, and social development. It is therefore useful to review the various interpretations of Moore’s Law and empirical evidence that could support them. Such an analysis reveals that semiconductor technology has evolved during the last four decades under very special economic conditions. In particular, the rapid development of microelectronics implies that economic and social demand has played a limited role in this industry. Contrary to popular claims, it appears that the common versions of Moore’s Law have not been valid during the last decades. As semiconductors are becoming important in economy and society, Moore’s Law is now becoming an increasingly misleading predictor of future developments.},
    number={11},
    journal={First Monday},
    author={Tuomi, Ilkka},
    year={2002},
    month={Nov.}
}

@InProceedings{10.1007/978-3-662-44202-9_11,
    author="Bierman, Gavin
    and Abadi, Mart{\'i}n
    and Torgersen, Mads",
    editor="Jones, Richard",
    title="Understanding TypeScript",
    booktitle="ECOOP 2014 -- Object-Oriented Programming",
    year="2014",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="257--281",
    abstract="TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers---well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.",
    isbn="978-3-662-44202-9"
}

@misc{TypeScri74,
    author = {},
    title = {TypeScript usage growing by leaps and bounds — report | InfoWorld},
    howpublished = {\url{https://www.infoworld.com/article/3650513/typescript-usage-growing-by-leaps-and-bounds-report.html}},
    month = {},
    year = {},
    note = {(Accessed on 02/18/2023)}
}
